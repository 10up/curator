{"service_name":"php-coveralls","service_event_type":"manual","repo_token":"JoIIJak0j0Z8M4ACmSGvUP3dtObiy3OS2","git":{"branch":"master","head":{"id":"5a2a9f4af518838a8f3542d306a2ee05a9fd02ae","author_name":"Aaron Holbrook","author_email":"aaron@10up.com","committer_name":"Aaron Holbrook","committer_email":"aaron@10up.com","message":"Add code coverage and composer"},"remotes":[{"name":"origin","url":"git@github.com:AaronHolbrook\/curator.git"}]},"run_at":"2014-11-01 17:47:18 +0000","source_files":[{"name":"curator.php","source":"<?php\n\/**\n * Plugin Name: Curator\n * Plugin URI:  http:\/\/github.com\/AaronHolbrook\/curator\n * Description: Select specific posts from across multiple post types to combine together and control the ordering.\n * Version:     0.2.2\n * Author:      Aaron Holbrook, Gustave Gerhardt, 10up\n * Author URI:  http:\/\/10up.com\n * License:     GPLv2+\n * Text Domain: cur\n * Domain Path: \/languages\n *\/\n\n\/**\n * Copyright (c) 2014 Aaron Holbrook, Gustave Gerhardt, 10up (email : info@10up.com)\n *\n * This program is free software; you can redistribute it and\/or modify\n * it under the terms of the GNU General Public License, version 2 or, at\n * your discretion, any later version, as published by the Free\n * Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n *\/\n\n\/**\n * Built using grunt-wp-plugin\n * Copyright (c) 2013 10up, LLC\n * https:\/\/github.com\/10up\/grunt-wp-plugin\n *\/\n\n\/\/ Useful global constants\ndefine( 'CUR_VERSION', '0.2.2' );\ndefine( 'CUR_URL',     plugin_dir_url( __FILE__ ) );\ndefine( 'CUR_PATH',    dirname( __FILE__ ) . '\/' );\n\n\/**\n * Include classes\n *\/\nrequire_once( CUR_PATH . 'includes\/class-singleton.php' );\nrequire_once( CUR_PATH . 'includes\/class-curator.php' );\nrequire_once( CUR_PATH . 'includes\/class-cpt-curator.php' );\nrequire_once( CUR_PATH . 'includes\/class-tax-curator.php' );\n\n\/**\n * Default initialization for the plugin:\n * - Registers the default textdomain.\n *\/\nfunction cur_init() {\n\t$locale = apply_filters( 'plugin_locale', get_locale(), 'cur' );\n\tload_textdomain( 'cur', WP_LANG_DIR . '\/cur\/cur-' . $locale . '.mo' );\n\tload_plugin_textdomain( 'cur', false, dirname( plugin_basename( __FILE__ ) ) . '\/languages\/' );\n}\nadd_action( 'wp_loaded', 'cur_setup_default_terms', 900 );\n\n\/**\n * Activate the plugin\n *\/\nfunction cur_activate() {\n\t\/\/ First load the init scripts in case any rewrite functionality is being loaded\n\tcur_init();\n\n\tflush_rewrite_rules();\n\n\tadd_action( 'init', 'cur_setup_default_terms', 900 );\n}\nregister_activation_hook( __FILE__, 'cur_activate' );\n\n\/**\n * Deactivate the plugin\n * Uninstall routines should be in uninstall.php\n *\/\nfunction cur_deactivate() {\n\n}\nregister_deactivation_hook( __FILE__, 'cur_deactivate' );\n\n\/\/ Wireup actions\nadd_action( 'init', 'cur_init' );","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,0,null,0,null,0,0,null,null,null,null,null,null,null,null,0,null,null,null,null]},{"name":"includes\/class-cpt-curator.php","source":"<?php\n\n\/**\n * Post type for Curator\n *\n * Class CUR_CPT_Curator\n *\/\nclass CUR_CPT_Curator extends CUR_Singleton {\n\n\t\/**\n\t * Internal use slug of post type\n\t *\n\t * @var string\n\t *\/\n\tpublic $cpt_slug = 'cur-curator';\n\n\t\/**\n\t * External URL facing slug for rewrites\n\t *\n\t * @var string\n\t *\/\n\tpublic $cpt_url_slug = 'curator';\n\n\t\/**\n\t * Build it\n\t *\n\t * @uses add_action()\n\t *\/\n\tpublic function __construct() {\n\t\tadd_action( 'init', array( $this, 'register_post_type' ) );\n\n\t\t\/\/ Save terms\/meta on save_post\n\t\tadd_action( 'save_post', array( $this, 'save_post' ), 10, 2 );\n\n\t\t\/\/ Uncurate items on unpublish\n\t\tadd_action( 'transition_post_status', array( $this, 'transition_post_status' ), 10, 3 );\n\n\t\tadd_action( 'admin_menu', array( $this, 'remove_add_new_menu' ), 999 );\n\t\tadd_action( 'admin_enqueue_scripts', array( $this, 'admin_enqueue' ) );\n\n\t\tadd_action( 'post_submitbox_misc_actions', array( $this, 'post_submitbox_misc_actions' ) );\n\n\t\tadd_action( 'trashed_post', array( $this, 'trashed_post' ), 200 );\n\n\t\t\/\/ Modify the edit post link to go directly to the original item\n\t\tadd_filter( 'get_edit_post_link', array( $this, 'filter_edit_post_link' ), 10, 3 );\n\n\t\tadd_action( 'admin_head', array( $this, 'admin_head' ) );\n\t}\n\n\t\/**\n\t * Add custom columns to the edit screen\n\t *\n\t * @since 0.2.0\n\t *\/\n\tpublic function admin_head() {\n\t\tif ( ! is_admin() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$screen = get_current_screen();\n\t\tif ( 'edit-cur-curator' !== $screen->id ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Add custom columns to show the origin post type and featured status\n\t\tadd_filter( 'manage_' . $this->cpt_slug . '_posts_columns', array( $this, 'manage_columns' ) );\n\n\t\t\/\/ Display our custom columns (need to add for each post type, as these posts are actually the original post\n\t\tadd_action( 'manage_pages_custom_column', array( $this, 'display_custom_columns' ), 10, 2 );\n\t\tadd_action( 'manage_posts_custom_column', array( $this, 'display_custom_columns' ), 10, 2 );\n\n\t\t$post_types = cur_get_post_types();\n\t\tif ( ! empty( $post_types ) ) {\n\t\t\tforeach ( (array) $post_types as $type ) {\n\t\t\t\tif ( 'post' !== $type || 'page' !== $type ) {\n\t\t\t\t\tadd_action( 'manage_' . $type . '_posts_columns', array( $this, 'display_custom_columns' ), 10, 2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t\/**\n\t * Disable the trash for this post type, as it just confuses things\n\t *\n\t * @param $post_id\n\t *\/\n\tpublic function trashed_post( $post_id ) {\n\t\tif ( cur_get_cpt_slug() === get_post_type( $post_id ) || in_array( get_post_type( $post_id ), cur_get_post_types() ) ) {\n\n\t\t\t\/\/ Get the ID of the main item, and then use the same removal\/disconnect method\n\t\t\tcur_uncurate_item( $post_id );\n\t\t}\n\t}\n\n\t\/**\n\t * Displays the checkbox for the post translated meta\n\t *\n\t * @access  public\n\t * @since   0.1\n\t * @uses    get_post_meta, _e\n\t * @return  void\n\t *\/\n\tpublic function post_submitbox_misc_actions() {\n\t\tglobal $post;\n\n\t\t\/\/ Only show curator if this post is published\n\t\tif ( ! empty( $post->post_status ) && 'publish' !== $post->post_status ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Is the curator enabled for this post type?\n\t\tif ( ! in_array( get_post_type( $post ), cur_get_post_types() ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$modules = cur_get_modules();\n\n\t\t$curated_post = cur_get_curated_post( $post->ID );\n\n\t\tif ( false !== $curated_post ) {\n\t\t\t$associated_terms = wp_list_pluck( wp_get_object_terms( $curated_post, cur_get_tax_slug() ), 'slug', 'term_id' );\n\t\t}\n\n\t\tforeach ( $modules as $module => $module_info ) {\n\t\t\tif ( ! empty( $module_info['enabled'] ) && true === $module_info['enabled'] && ! empty( $module_info['slug'] ) ) {\n\n\t\t\t\t\/\/ Get the term object information\n\t\t\t\t$term = get_term_by( 'slug', $module_info['slug'], cur_get_tax_slug() );\n\n\t\t\t\t\/\/ Only show the other modules if this item is curated\n\t\t\t\tif ( 'curator' === $module || false !== $curated_post ) {\n\t\t\t\t\t$checked = false;\n\t\t\t\t\tif ( ! empty( $associated_terms[ $term->term_id ] ) ) {\n\t\t\t\t\t\t$checked = true;\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t\t<div class=\"misc-pub-section\">\n\t\t\t\t\t\t<input type=\"checkbox\" id=\"<?php esc_attr_e( $module_info['slug'] ); ?>\" name=\"<?php esc_attr_e( $module_info['slug'] ); ?>\" <?php checked( true, $checked ); ?> value=\"on\" \/>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tprintf( '<label for=\"%s\">%s<\/label>', esc_attr( $module_info['slug'] ), esc_html( $module_info['label'] ) );\n\n\t\t\t\t\t\tdo_action( 'cur_module_' . $module . '_control' );\n\n\t\t\t\t\t\tif ( 'curator' === $module ) {\n\t\t\t\t\t\t\twp_nonce_field( 'cur_curate_item', 'cur_curate_item_nonce' );\n\t\t\t\t\t\t} ?>\n\t\t\t\t\t<\/div>\n\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t\/**\n\t * Set whether the post should be curated or not\n\t *\n\t * @param $post_id\n\t *\/\n\tpublic function save_post( $post_id, $post ) {\n\t\t\/\/ Is the curator enabled for this post type?\n\t\tif ( ! in_array( $post->post_type, cur_get_post_types() ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Hah! Nice try - nope, no curating unpublished items\n\t\tif ( 'publish' !== $post->post_status ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ If autosave, our form has not been submitted, don't do anything\n\t\tif ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Check user's permissions\n\t\tif ( ! current_user_can( 'edit_page', $post_id ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Check nonce set\n\t\tif ( ! isset( $_POST['cur_curate_item_nonce'] ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Verify nonce\n\t\tif ( ! wp_verify_nonce( $_POST['cur_curate_item_nonce'], 'cur_curate_item' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$modules = cur_get_modules();\n\n\t\t\/**\n\t\t * Curate\/Uncurate item logic\n\t\t * Run before anything else\n\t\t *\/\n\t\tif ( ! empty( $modules['curator'] ) && $modules['curator']['enabled'] && true === $modules['curator']['enabled'] ) {\n\t\t\t$curated_post = cur_get_curated_post( $post->ID );\n\t\t\t$curate_term = cur_get_module_term( 'curator' );\n\n\t\t\t\/\/ This post is not curated\n\t\t\tif ( false === $curated_post ) {\n\n\t\t\t\t\/\/ This post is not curated; we wish to curate it\n\t\t\t\tif ( isset( $_POST[ $curate_term ] ) && 'on' === $_POST[ $curate_term ] ) {\n\t\t\t\t\t$curated_post = cur_curate_post( $post_id, $post );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ This post is curated\n\t\t\telse {\n\n\t\t\t\t\/\/ This post is curated; we don't want to uncurate it. Grab the curated post id\n\t\t\t\tif ( isset( $_POST[ $curate_term ] ) && 'on' === $_POST[ $curate_term ] ) {\n\t\t\t\t\t$curated_post = cur_get_related_id( $post_id );\n\t\t\t\t}\n\n\t\t\t\t\/\/ This post is curated and we want to uncurate it\n\t\t\t\telse {\n\t\t\t\t\tcur_uncurate_item( $post_id );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ Only run other modules if this post has been curated\n\t\t\tif ( false !== $curated_post ) {\n\t\t\t\t$associated_terms = wp_list_pluck( wp_get_object_terms( $curated_post, cur_get_tax_slug() ), 'slug', 'term_id' );\n\n\t\t\t\t\/**\n\t\t\t\t * Run through and set\/unset our other modules\n\t\t\t\t *\/\n\t\t\t\tforeach ( $modules as $module => $module_info ) {\n\t\t\t\t\tif ( ! empty( $module_info['enabled'] ) && true === $module_info['enabled'] && ! empty( $module_info['slug'] ) ) {\n\n\t\t\t\t\t\t\/\/ Skip the curator module, already handled that logic above\n\t\t\t\t\t\tif ( 'curator' === $module ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\/\/ Get term object\n\t\t\t\t\t\t$term = get_term_by( 'slug', $module_info['slug'], cur_get_tax_slug() );\n\n\t\t\t\t\t\tif ( ! empty( $term->slug ) ) {\n\t\t\t\t\t\t\t$term_slug = $term->slug;\n\n\t\t\t\t\t\t\t\/\/ See if term is currently associated with post\n\t\t\t\t\t\t\tif ( ! empty( $associated_terms[ $term->term_id ] ) && $module_info['slug'] === $term_slug ) {\n\n\t\t\t\t\t\t\t\t\/\/ Post associated with term; no change\n\t\t\t\t\t\t\t\tif ( isset( $_POST[ $term_slug ] ) && 'on' === $_POST[ $term_slug ] ) {\n\n\t\t\t\t\t\t\t\t\t\/\/ Featurer is enabled, allow for custom sizes\n\t\t\t\t\t\t\t\t\tif ( ! empty( $_POST['cur-featurer-size'] ) ) {\n\t\t\t\t\t\t\t\t\t\tif ( 'featurer' === $module && cur_is_module_enabled( 'featurer' ) ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\/\/ Ensure custom sizes exist\n\t\t\t\t\t\t\t\t\t\t\t$sizes = cur_get_featurer_sizes();\n\t\t\t\t\t\t\t\t\t\t\tif ( ! empty( $sizes ) ) {\n\t\t\t\t\t\t\t\t\t\t\t\tupdate_post_meta( $curated_post, 'cur_featured_size', sanitize_text_field( $_POST['cur-featurer-size'] ) );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t} \/\/ Post associated with term; remove term association\n\t\t\t\t\t\t\t\telse if ( ! isset( $_POST[ $term_slug ] ) ) {\n\t\t\t\t\t\t\t\t\t$set_modules[ $module ] = 'remove';\n\n\t\t\t\t\t\t\t\t\t\/\/ If pinner module, remove from pinned items array\n\t\t\t\t\t\t\t\t\tif ( 'pinner' === $module && cur_is_module_enabled( 'pinner' ) ) {\n\t\t\t\t\t\t\t\t\t\tcur_unpin_item( $curated_post );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\/\/ Ensure custom sizes exist\n\t\t\t\t\t\t\t\t\t$sizes = cur_get_featurer_sizes();\n\t\t\t\t\t\t\t\t\tif ( 'featurer' === $module && cur_is_module_enabled( 'featurer' ) ) {\n\t\t\t\t\t\t\t\t\t\tdelete_post_meta( $curated_post, 'cur_featured_size' );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} \/\/ Post not associated with term\n\t\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\t\t\/\/ Post not associated with term; add term association\n\t\t\t\t\t\t\t\tif ( isset( $_POST[ $term_slug ] ) && 'on' === $_POST[ $term_slug ] ) {\n\t\t\t\t\t\t\t\t\t$set_modules[ $module ] = 'add';\n\n\t\t\t\t\t\t\t\t\t\/\/ If pinner module, add to pinner array\n\t\t\t\t\t\t\t\t\tif ( 'pinner' === $module && cur_is_module_enabled( 'pinner' ) ) {\n\t\t\t\t\t\t\t\t\t\tcur_pin_item( $curated_post );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\/\/ We have a change to make\n\t\t\t\tif ( ! empty( $set_modules ) ) {\n\t\t\t\t\tcur_set_item_modules( $set_modules, $curated_post );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t\/**\n\t * Uncurate posts if they get unpublished\n\t *\n\t * @param $new_status\n\t * @param $old_status\n\t * @param $post\n\t *\/\n\tpublic function transition_post_status( $new_status, $old_status, $post ) {\n\t\tif ( $old_status === 'publish' && $new_status !== 'publish' ) {\n\t\t\t$curated_post = cur_get_curated_post( $post->ID );\n\n\t\t\tif ( false !== $curated_post && is_int( $curated_post ) && $post->ID !== $curated_post ) {\n\n\t\t\t\t\/\/ Transitioning an original post, let's uncurate it\n\t\t\t\tcur_uncurate_item( $post->ID );\n\t\t\t}\n\t\t}\n\t}\n\n\t\/**\n\t * Remove the 'Add New' submenu item\n\t *\n\t * @since 0.2.0\n\t *\/\n\tpublic function remove_add_new_menu() {\n\t\tremove_submenu_page( 'edit.php?post_type=' . $this->cpt_slug, 'post-new.php?post_type=' . $this->cpt_slug );\n\t}\n\n\t\/**\n\t * Enqueue our styles and scripts for admin usage\n\t *\n\t * @since 0.2.0\n\t *\/\n\tpublic function admin_enqueue() {\n\t\t$postfix = ( defined( 'SCRIPT_DEBUG' ) && true === SCRIPT_DEBUG ) ? '' : '.min';\n\n\t\twp_enqueue_style( 'curator_admin', CUR_URL . '\/assets\/css\/curator_admin.css' );\n\t}\n\n\t\/**\n\t * Registration\n\t *\n\t * @uses register_post_type()\n\t * @since 0.1.0\n\t *\/\n\tpublic function register_post_type() {\n\t\t$menu_icon = apply_filters( 'cur_menu_icon', 'dashicons-schedule' );\n\n\t\t$labels = array(\n\t\t\t'name'               => _x( 'Curator', 'curator post type general name', 'fpb' ),\n\t\t\t'singular_name'      => _x( 'Curated Items', 'curator post type singular name', 'fpb' ),\n\t\t\t'menu_name'          => _x( 'Curator', 'admin menu', 'fpb' ),\n\t\t\t'name_admin_bar'     => _x( 'Curator', 'add new on admin bar', 'fpb' ),\n\t\t\t'add_new'            => __( 'Add New', 'add new', 'fpb' ),\n\t\t\t'add_new_item'       => __( 'Add New Curated Item', 'fpb' ),\n\t\t\t'new_item'           => __( 'New Curated Item', 'fpb' ),\n\t\t\t'edit_item'          => __( 'Edit Curated Item', 'fpb' ),\n\t\t\t'view_item'          => __( 'View Curated Item', 'fpb' ),\n\t\t\t'all_items'          => __( 'All Curator', 'fpb' ),\n\t\t\t'search_items'       => __( 'Search Curated Items', 'fpb' ),\n\t\t\t'parent_item_colon'  => __( 'Parent Curated Item:', 'fpb' ),\n\t\t\t'not_found'          => __( 'No Curated Items found.', 'fpb' ),\n\t\t\t'not_found_in_trash' => __( 'No Curated Items found in Trash.', 'fpb' ),\n\t\t);\n\n\t\t$args = array(\n\t\t\t'labels'              => $labels,\n\t\t\t'public'              => false,\n\t\t\t'publicly_queryable'  => false,\n\t\t\t'show_ui'             => true,\n\t\t\t'show_in_menu'        => true,\n\t\t\t'show_in_admin_bar'   => false,\n\t\t\t'query_var'           => true,\n\t\t\t'menu_icon'           => $menu_icon,\n\t\t\t'capability_type'     => 'post',\n\t\t\t'has_archive'         => true,\n\t\t\t'hierarchical'        => true,\n\t\t\t'menu_position'       => 3,\n\t\t\t'rewrite'             => array( 'slug' => $this->cpt_url_slug ),\n\t\t\t'exclude_from_search' => true,\n\t\t\t'supports'            => array(\n\t\t\t\t'title',\n\t\t\t),\n\t\t);\n\n\t\tregister_post_type( $this->cpt_slug, $args );\n\t}\n\n\t\/**\n\t * Modify the curator post edit link to point to the original post\n\t *\n\t * @param $edit_link\n\t * @param $post_id\n\t * @param $context\n\t *\n\t * @return mixed\n\t * @since 0.1.0\n\t *\/\n\tpublic function filter_edit_post_link( $edit_link, $post_id, $context ) {\n\n\t\tif ( $this->cpt_slug === get_post_type( $post_id ) ) {\n\n\t\t\t\/\/ We found a curator post type, let's get it's related post ID\n\t\t\t$related_post_id = cur_get_related_id( $post_id );\n\n\t\t\t\/\/ Replace the Curated post type ID with the original post ID\n\t\t\t$edit_link = str_replace( $post_id, $related_post_id, $edit_link );\n\t\t}\n\n\t\treturn $edit_link;\n\t}\n\n\t\/**\n\t * Add custom columns to curator post type.\n\t * Featured Column (shows which posts should be weighted with more prominence)\n\t * Post Type (Shows origin post type)\n\t *\n\t * @param $columns\n\t *\n\t * @return array\n\t *\n\t * @since 0.2.0\n\t *\/\n\tpublic function manage_columns( $columns ) {\n\t\t$new_columns = array(\n\t\t\t'pinned'    => __( 'Pinned', 'fpb' ),\n\t\t\t'featured'  => __( 'Featured', 'fpb' ),\n\t\t\t'post_type' => __( 'Post Type', 'fpb' ),\n\t\t);\n\n\t\t$count = 0;\n\t\tif ( ! empty( $columns['cb'] ) ) {\n\t\t\t$count++;\n\t\t}\n\t\tif ( ! empty( $columns['title'] ) ) {\n\t\t\t$count++;\n\t\t}\n\n\t\t\/\/ Insert our columns directly after the title - all other columns should be forced after these columns\n\t\t$columns = array_slice( $columns, 0, $count, true ) +\n\t\t           $new_columns +\n\t\t           array_slice( $columns, $count, count( $columns ) - $count, true );\n\n\t\treturn $columns;\n\t}\n\n\t\/**\n\t * Display for our custom columns\n\t *\n\t * @param $column\n\t * @param $post_id\n\t *\n\t * @since 0.2.0\n\t *\/\n\tpublic function display_custom_columns( $column, $post_id ) {\n\t\t$modules = cur_get_modules();\n\n\t\t$curated_post = cur_get_curated_post( $post_id );\n\n\t\tswitch( $column ) {\n\t\t\tcase 'pinned':\n\t\t\t\t$associated_terms = wp_list_pluck( wp_get_object_terms( $curated_post, cur_get_tax_slug() ), 'slug', 'term_id' );\n\n\t\t\t\t$term = get_term_by( 'slug', $modules['pinner']['slug'], cur_get_tax_slug() );\n\n\t\t\t\tif ( ! empty( $associated_terms[ $term->term_id ] ) ) {\n\t\t\t\t\t$pinned = true;\n\t\t\t\t} else {\n\t\t\t\t\t$pinned = false;\n\t\t\t\t}\n\n\t\t\t\tif ( true === $pinned ) {\n\t\t\t\t\techo '<div class=\"wp-menu-image dashicons-before dashicons-admin-post cur-curator-featured-item\"><br><\/div>';\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'featured':\n\t\t\t\t$associated_terms = wp_list_pluck( wp_get_object_terms( $curated_post, cur_get_tax_slug() ), 'slug', 'term_id' );\n\n\t\t\t\t$term = get_term_by( 'slug', $modules['featurer']['slug'], cur_get_tax_slug() );\n\n\t\t\t\tif ( ! empty( $associated_terms[ $term->term_id ] ) ) {\n\t\t\t\t\t$featured = true;\n\t\t\t\t} else {\n\t\t\t\t\t$featured = false;\n\t\t\t\t}\n\n\t\t\t\tif ( true === $featured ) {\n\t\t\t\t\techo '<div class=\"wp-menu-image dashicons-before dashicons-star-filled cur-curator-featured-item\"><br><\/div>';\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'post_type';\n\t\t\t\t$post_type = get_post_type( cur_get_related_id( $curated_post ) );\n\t\t\t\t$post_type_obj = get_post_type_object( $post_type );\n\n\t\t\t\techo esc_html( $post_type_obj->labels->singular_name );\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nCUR_CPT_Curator::factory();\n\n\/**\n * Accessor Functions\n *\/\n\nfunction cur_get_cpt_slug() {\n\treturn CUR_CPT_Curator::factory()->cpt_slug;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,0,null,null,0,null,0,0,null,0,null,0,null,null,0,null,0,0,null,null,null,null,null,null,null,0,0,null,null,0,0,0,null,null,null,0,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,null,null,1,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,0,null,null,0,0,null,null,null,0,0,null,null,0,null,0,null,0,0,0,null,0,0,null,null,0,null,null,0,0,0,0,0,null,null,null,null,0,null,0,null,0,0,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,6,6,null,null,null,6,1,null,null,null,6,0,null,null,null,6,6,null,null,null,0,0,null,null,null,0,0,null,null,0,null,null,null,null,null,0,0,0,null,null,0,null,null,0,0,0,0,null,null,null,null,null,0,0,0,null,null,null,0,null,null,null,null,0,0,null,null,null,null,0,0,null,null,0,0,null,null,null,0,null,0,0,null,null,0,null,null,0,null,null,0,0,null,null,0,0,0,0,0,0,null,0,null,0,0,null,null,0,0,0,null,null,0,0,0,0,0,0,null,null,null,0,0,null,null,0,0,0,0,null,0,0,0,null,null,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,6,2,null,2,null,null,1,1,2,6,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,0,null,0,0,null,null,null,null,null,null,null,null,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,0,null,null,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,0,0,null,0,null,0,0,0,0,null,null,0,0,0,null,0,0,0,null,0,null,0,0,0,0,null,null,0,0,0,null,0,0,0,0,null,0,null,0,null,0,null,null,null,null,null,null,null,null,null,6,null]},{"name":"includes\/class-curator.php","source":"<?php\n\nclass CUR_Curator extends CUR_Singleton {\n\n\t\/**\n\t * Slug of post meta to store ID of related post\n\t *\n\t * @var string\n\t * @since 0.1.0\n\t *\/\n\tprivate $curated_meta_slug = '_curator_related_id';\n\n\t\/**\n\t * Our default post status when we create a new curated item\n\t *\n\t * @var string\n\t * @since 0.1.0\n\t *\/\n\tprivate static $default_post_status = 'publish';\n\n\t\/**\n\t * Default enabled portions of the module\n\t *\n\t * @var array\n\t * @since 0.1.0\n\t *\/\n\tprivate static $modules = array();\n\n\t\/**\n\t * Which post types should the Curator be allowed to include?\n\t *\n\t * @var array\n\t * @since 0.1.0\n\t *\/\n\tprivate static $post_types = array();\n\n\t\/**\n\t * Setup actions\/filters\n\t *\n\t * @since 0.1.0\n\t *\/\n\tpublic function setup() {\n\n\t\tself::$modules = array(\n\t\t\t'curator'  => array(\n\t\t\t\t'slug'    => 'cur-curated-item',\n\t\t\t\t'enabled' => true,\n\t\t\t\t'label'   => __( 'Curate Item', 'cur' ),\n\t\t\t),\n\t\t\t'featurer' => array(\n\t\t\t\t'slug'    => 'cur-featured-item',\n\t\t\t\t'enabled' => false,\n\t\t\t\t'label'   => __( 'Feature Item', 'cur' ),\n\t\t\t\t'sizes'   => array(\n\t\t\t\t\t'enabled' => false,\n\t\t\t\t\t'sizes'   => array(\n\t\t\t\t\t\t'1x1' => true,\n\t\t\t\t\t\t'2x2' => true,\n\t\t\t\t\t\t'2x1' => true,\n\t\t\t\t\t\t'1x2' => false,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\t'pinner'   => array(\n\t\t\t\t'slug'      => 'cur-pinned-item',\n\t\t\t\t'option'    => 'curator-pinned-items',\n\t\t\t\t'max_items' => 3,\n\t\t\t\t'enabled'   => false,\n\t\t\t\t'label'     => __( 'Pin Item', 'cur' ),\n\t\t\t),\n\t\t);\n\n\t\t\/\/ Set the filters to fire during `wp_loaded`\n\t\tadd_action( 'wp_loaded', array( $this, 'filter_settings' ) );\n\n\t\t\/\/ Inject sticky posts if pinner is enabled\n\t\tadd_filter( 'the_posts', array( $this, 'filter_sticky_posts' ), 20, 2 );\n\n\t\t\/\/ Replace the Curator query items with their original items\n\t\tadd_filter( 'the_posts', array( $this, 'filter_the_posts' ), 900, 2 );\n\n\t\t\/\/ Display featurer sizes\n\t\tadd_action( 'cur_module_featurer_control', array( $this, 'featurer_size_display' ) );\n\t}\n\n\t\/**\n\t * Allow custom configuration using filters\n\t *\n\t * @uses cur_settings\n\t * @uses cur_set_post_types\n\t * @uses cur_set_create_post_status\n\t * @since 0.1.0\n\t *\/\n\tpublic function filter_settings() {\n\n\t\t\/\/ Allow modification of different modules. Curation, Featuring and Pinning of items\n\t\tself::$modules = apply_filters( 'cur_modules', self::$modules );\n\n\t\t\/\/ Which post types should we curate?\n\t\tself::$post_types = apply_filters( 'cur_set_post_types', self::$post_types );\n\n\t\t\/\/ Allow configuration of the default curator creation status of a post (Default is 'publish')\n\t\tself::$default_post_status = apply_filters( 'cur_set_create_post_status', self::$default_post_status );\n\n\t\t\/\/ Allow manual override on limit of pinned items. Default is 3\n\t\tself::$modules['pinner']['max_items'] = apply_filters( 'cur_pinned_items', self::$modules['pinner']['max_items'] );\n\n\t\t\/\/ Featurer sizes are disabled by default\n\t\tself::$modules['featurer']['sizes']['enabled'] = apply_filters( 'cur_featurer_size_status', self::$modules['featurer']['sizes']['enabled'] );\n\n\t\t\/\/ Featurer size controls\n\t\tself::$modules['featurer']['sizes']['sizes'] = apply_filters( 'cur_featurer_sizes', self::$modules['featurer']['sizes']['sizes'] );\n\t}\n\n\t\/**\n\t * Get the post types curator is enabled for\n\t *\n\t * @return array\n\t * @since 0.1.0\n\t *\/\n\tpublic function get_post_types() {\n\t\treturn self::$post_types;\n\t}\n\n\t\/**\n\t * Getter for retrieving the settings\n\t *\n\t * @return array\n\t * @since 0.1.0\n\t *\/\n\tpublic function get_modules() {\n\t\treturn self::$modules;\n\t}\n\n\t\/**\n\t * Getter for retrieving the option name for the pinner\n\t *\n\t * @return mixed\n\t * @since 0.1.0\n\t *\/\n\tpublic function get_pinner_option_slug() {\n\t\treturn self::$modules['pinner']['option'];\n\t}\n\n\t\/**\n\t * Getter for retrieving max pinnable items\n\t *\n\t * @return mixed\n\t * @since 0.1.0\n\t *\/\n\tpublic function get_pinner_max_items() {\n\t\treturn self::$modules['pinner']['max_items'];\n\t}\n\n\t\/**\n\t * Getter for retrieving the featurer sizes\n\t *\n\t * @return mixed\n\t *\/\n\tpublic function get_featurer_sizes() {\n\t\t$sizes = false;\n\n\t\tif ( cur_is_module_enabled('featurer') ) {\n\t\t\tif ( true === self::$modules['featurer']['sizes']['enabled'] ) {\n\t\t\t\t$sizes = self::$modules['featurer']['sizes']['sizes'];\n\t\t\t}\n\t\t}\n\n\t\treturn $sizes;\n\t}\n\n\t\/**\n\t * Curates a post\n\t *\n\t * @param $post_id\n\t * @param $post\n\t *\n\t * @return bool|int|WP_Error\n\t * @since 0.1.0\n\t *\/\n\tpublic function curate_post( $post_id, $post ) {\n\n\t\t\/\/ Create a post and add in as meta the original post's ID\n\t\t\/\/ @todo Get top ordered posts and place on top (via menu_order)\n\t\t$args = array(\n\t\t\t'post_type'      => cur_get_cpt_slug(),\n\t\t\t'posts_per_page' => 1,\n\t\t\t'orderby'        => 'menu_order',\n\t\t\t'order'          => 'ASC',\n\t\t);\n\n\t\t$top_curated_items = new WP_Query( $args );\n\t\tif ( $top_curated_items->have_posts() ) {\n\t\t\t$top_item_position = $top_curated_items->posts[0]->menu_order;\n\t\t\tif ( $top_item_position > 0 ) {\n\t\t\t\t$top_item_position -= 1;\n\t\t\t}\n\t\t} else {\n\t\t\t$top_item_position = 0;\n\t\t}\n\n\t\t$new_post_args = array(\n\t\t\t'post_title'     => $post->post_title,\n\t\t\t'post_type'      => cur_get_cpt_slug(),\n\t\t\t'post_status'    => self::$default_post_status,\n\t\t\t'menu_order'     => $top_item_position,\n\t\t\t'comment_status' => 'closed',\n\t\t);\n\n\t\t$curated_post = wp_insert_post( $new_post_args );\n\n\t\tif ( $curated_post && ! is_wp_error( $curated_post ) ) {\n\n\t\t\t\/\/ Add our related post ID to the curator post meta\n\t\t\tupdate_post_meta( $curated_post, $this->curated_meta_slug, $post_id );\n\n\t\t\t\/\/ Add our curator post id to the original post\n\t\t\tupdate_post_meta( $post_id, $this->curated_meta_slug, $curated_post );\n\n\t\t\twp_add_object_terms( $curated_post, cur_get_module_term( 'curator' ), cur_get_tax_slug() );\n\n\t\t\treturn $curated_post;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t\/**\n\t * Sets the modules for each item\n\t *\n\t * @param $set_modules\n\t * @param $curated_post\n\t * @since 0.2.0\n\t *\/\n\tpublic function set_item_modules( $set_modules, $curated_post ) {\n\n\t\t\/\/ Get a simple array of already associated terms in the format of: array( (int) $term_id => (string) $slug ) )\n\t\t$associated_terms = $prev_terms = wp_list_pluck( wp_get_object_terms( $curated_post, cur_get_tax_slug() ), 'slug', 'term_id' );\n\n\t\tforeach ( $set_modules as $module => $action ) {\n\t\t\t$term = get_term_by( 'slug', cur_get_module_term( $module ), cur_get_tax_slug() );\n\n\t\t\tif ( false === $term || is_wp_error( $term ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( 'add' === $action ) {\n\t\t\t\t$associated_terms[ $term->term_id ] = $term->slug;\n\t\t\t} else if ( 'remove' === $action ) {\n\t\t\t\tunset( $associated_terms[ $term->term_id ] );\n\t\t\t}\n\t\t}\n\n\t\t\/\/ If there's been a change, overwrite all old terms with our new list\n\t\tif ( $associated_terms !== $prev_terms ) {\n\n\t\t\t\/\/ Set terms to curated post object\n\t\t\twp_set_object_terms( $curated_post, array_keys( $associated_terms ), cur_get_tax_slug() );\n\t\t}\n\t}\n\n\t\/**\n\t * Pin item\n\t * Add curated post id to pinned item array in options table\n\t * If array gets larger than max # of items allowable, unpin oldest items\n\t *\n\t * @param $curated_id\n\t * @since 0.2.0\n\t *\/\n\tpublic function pin_item( $curated_id ) {\n\n\t\t\/\/ Ensure our pinner module is enabled\n\t\tif ( true !== cur_is_module_enabled( 'pinner' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$max_items = cur_get_pinner_max_items();\n\t\t$option_slug = cur_get_pinner_option_slug();\n\n\t\t$pinned_items = get_option( $option_slug );\n\t\tif ( empty( $pinned_items ) ) {\n\t\t\t$pinned_items = array();\n\t\t}\n\n\t\t\/\/ Add our new item onto the top of the pinned stack\n\t\tarray_unshift( $pinned_items, $curated_id );\n\n\t\t\/\/ If we're over the max items allotted, unpin the overage items\n\t\tif ( count( $pinned_items ) > $max_items ) {\n\t\t\t$unpin_items = array_splice( $pinned_items, $max_items, 1 );\n\t\t\tforeach ( (array) $unpin_items as $unpin_item ) {\n\t\t\t\t$this->unpin_item( $unpin_item, $pinned_items );\n\t\t\t}\n\t\t}\n\n\t\t\/\/ Update the pinned items with our new item in front\n\t\tupdate_option( $option_slug, $pinned_items );\n\t}\n\n\t\/**\n\t * Unpins item\n\t * Removes curated post ID from option array\n\t * Unassociates the pinner term from the curated post\n\t *\n\t * @param $curated_id\n\t * @since 0.2.0\n\t *\/\n\tpublic function unpin_item( $curated_id, $pinned_items = null ) {\n\t\t\/\/ Ensure our pinner module is enabled\n\t\tif ( true !== cur_is_module_enabled( 'pinner' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( null === $pinned_items ) {\n\t\t\t$pinned_items = get_option( cur_get_pinner_option_slug() );\n\t\t}\n\n\t\tif ( empty( $pinned_items ) ) {\n\t\t\t$pinned_items = array();\n\t\t}\n\n\t\t\/\/ Find our item's current position\n\t\t$position = array_search( (int) $curated_id, $pinned_items );\n\n\t\t\/\/ Remove this item from the pinned items array\n\t\tif ( false !== $position ) {\n\t\t\tunset( $pinned_items[ $position ] );\n\n\t\t\t\/\/ Update the pinned items array\n\t\t\tupdate_option( cur_get_pinner_option_slug(), $pinned_items );\n\t\t}\n\n\t\t\/\/ Unassociate pinner term from curate post\n\t\twp_remove_object_terms( $curated_id, cur_get_module_term( 'pinner' ), cur_get_tax_slug() );\n\t}\n\n\t\/**\n\t * Get the related post (works both ways, cur-curator to other post type or vice versa)\n\t *\n\t * @param $post_id\n\t *\n\t * @return mixed\n\t * @since 0.2.0\n\t *\/\n\tpublic function get_related_id( $post_id ) {\n\t\t$post_id = intval( $post_id );\n\t\t$related_id = intval( get_post_meta( $post_id, $this->curated_meta_slug, true ) );\n\n\t\tif ( is_int( $related_id ) && 0 !== $related_id ) {\n\t\t\t$self_id = intval( get_post_meta( $related_id, $this->curated_meta_slug, true ) );\n\n\t\t\t\/\/ Something got unsynced, there's no related post that links back to this. Cleaning up\n\t\t\tif ( \"\" === $self_id ) {\n\t\t\t\tdelete_post_meta( $post_id, $this->curated_meta_slug, true );\n\t\t\t} else if ( $self_id === $post_id ) {\n\t\t\t\treturn $related_id;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t\/**\n\t * Returns only the curator post type ID. Will determine what post type you're passing.\n\t *\n\t * @param $post_id\n\t *\n\t * @return mixed\n\t * @since 0.2.0\n\t *\/\n\tpublic function get_curated_post( $post_id = 0 ) {\n\t\t$post = get_post( $post_id );\n\t\t$post_id = $post->ID;\n\n\t\t\/\/ Ensure we have a legitimate post\n\t\tif ( is_wp_error( $post_id ) || empty( $post_id ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ check to see if curator post type, if not then get the curator post type\n\t\tif ( cur_get_cpt_slug() === get_post_type( $post_id ) ) {\n\t\t\treturn $post_id;\n\t\t} else {\n\t\t\treturn $this->get_related_id( $post_id );\n\t\t}\n\t}\n\n\t\/**\n\t * Return the original post's ID, regardless of what post_id is passed\n\t *\n\t * @param $post_id\n\t *\n\t * @return mixed\n\t *\/\n\tpublic function get_original_post( $post_id ) {\n\t\t$post = get_post( $post_id );\n\t\t$post_id = $post->ID;\n\n\t\t\/\/ Ensure we have a legitimate post\n\t\tif ( is_wp_error( $post_id ) || empty( $post_id ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ See what post we're dealing with, get the original\n\t\tif ( cur_get_cpt_slug() === get_post_type( $post_id ) ) {\n\t\t\treturn $this->get_related_id( $post_id );\n\t\t} else {\n\t\t\treturn $post_id;\n\t\t}\n\t}\n\n\t\/**\n\t * Utility method to check if a module is enabled or not\n\t *\n\t * @param $module\n\t *\n\t * @return bool\n\t * @since 0.2.0\n\t *\/\n\tpublic function is_module_enabled( $module ) {\n\t\t$is_enabled = false;\n\n\t\t$modules = $this->get_modules();\n\n\t\tif ( ! empty( $modules[ $module ] ) && true === $modules[ $module ]['enabled'] ) {\n\t\t\t$is_enabled = true;\n\t\t}\n\n\t\treturn $is_enabled;\n\t}\n\n\tpublic function get_module_term( $module ) {\n\t\t$modules = $this->get_modules();\n\t\t$term    = false;\n\n\t\tif ( ! empty( $modules[ $module ]['slug'] ) && true === $modules[ $module ]['enabled'] ) {\n\t\t\t$term = $modules[ $module ]['slug'];\n\t\t}\n\n\t\treturn $term;\n\t}\n\n\t\/**\n\t * Remove curation status from item\n\t *\n\t * @param $post_id\n\t * @return WP_Post | array | bool\n\t * @since 0.2.0\n\t *\/\n\tpublic function uncurate_item( $post_id ) {\n\n\t\t\/\/ Get original item\n\t\t$original_id = cur_get_original_post( $post_id );\n\n\t\t\/\/ Get curated item\n\t\t$curated_id = cur_get_curated_post( $post_id );\n\n\t\t\/\/ Unset all the things from the original post\n\t\tif ( ! empty( $original_id ) && is_int( $original_id ) ) {\n\n\t\t\t\/\/ Remove item module\n\t\t\t$curate_term = get_term_by( 'slug', cur_get_module_term( 'curator' ), cur_get_tax_slug() );\n\n\t\t\t\/\/ Unset the curation term of the main post\n\t\t\twp_remove_object_terms( $original_id, $curate_term->term_id, cur_get_tax_slug() );\n\n\t\t\t\/\/ Remove the associated meta of the curated post ID\n\t\t\tdelete_post_meta( $original_id, $this->curated_meta_slug );\n\t\t}\n\n\t\t\/\/ Delete the curation post entirely\n\t\treturn wp_delete_post( $curated_id, true );\n\t}\n\n\t\/**\n\t * Using WP_Query sticky post logic here for our custom post type.\n\t * Takes sticky posts and moves them to the top of the query\n\t *\n\t * @param $posts\n\t * @param $query\n\t *\n\t * @return mixed\n\t * @since 0.2.0\n\t *\/\n\tpublic function filter_sticky_posts( $posts, $query ) {\n\n\t\t\/\/ Ensure that we are only filtering for curator queries\n\t\tif ( ! empty( $query->query['post_type'] )\n\t\t     && ! is_array( $query->query['post_type'] )\n\t\t     && cur_get_cpt_slug() === $query->query['post_type']\n\t\t) {\n\t\t\t$q    = $query->query_vars;\n\t\t\t$page = 1;\n\n\t\t\t\/\/ Paging\n\t\t\tif ( empty( $q['nopaging'] ) && ! $query->is_singular ) {\n\t\t\t\t$page = absint( $q['paged'] );\n\t\t\t\tif ( ! $page ) {\n\t\t\t\t\t$page = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ Put sticky posts at the top of the posts array\n\t\t\t$sticky_posts = get_option( cur_get_pinner_option_slug() );\n\t\t\tif ( $page <= 1 && is_array( $sticky_posts ) && ! empty( $sticky_posts ) && ! $q['ignore_sticky_posts'] ) {\n\t\t\t\t$num_posts     = count( $posts );\n\t\t\t\t$sticky_offset = 0;\n\t\t\t\t\/\/ Loop over posts and relocate stickies to the front.\n\t\t\t\tfor ( $i = 0; $i < $num_posts; $i ++ ) {\n\t\t\t\t\tif ( in_array( $posts[ $i ]->ID, $sticky_posts ) ) {\n\t\t\t\t\t\t$sticky_post = $posts[ $i ];\n\t\t\t\t\t\t\/\/ Remove sticky from current position\n\t\t\t\t\t\tarray_splice( $posts, $i, 1 );\n\t\t\t\t\t\t\/\/ Move to front, after other stickies\n\t\t\t\t\t\tarray_splice( $posts, $sticky_offset, 0, array( $sticky_post ) );\n\t\t\t\t\t\t\/\/ Increment the sticky offset. The next sticky will be placed at this offset.\n\t\t\t\t\t\t$sticky_offset ++;\n\t\t\t\t\t\t\/\/ Remove post from sticky posts array\n\t\t\t\t\t\t$offset = array_search( $sticky_post->ID, $sticky_posts );\n\t\t\t\t\t\tunset( $sticky_posts[ $offset ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\/\/ If any posts have been excluded specifically, Ignore those that are sticky.\n\t\t\t\tif ( ! empty( $sticky_posts ) && ! empty( $q['post__not_in'] ) ) {\n\t\t\t\t\t$sticky_posts = array_diff( $sticky_posts, $q['post__not_in'] );\n\t\t\t\t}\n\n\t\t\t\t\/\/ Fetch sticky posts that weren't in the query results\n\t\t\t\tif ( ! empty( $sticky_posts ) ) {\n\t\t\t\t\t$stickies = get_posts( array(\n\t\t\t\t\t\t'post__in'    => $sticky_posts,\n\t\t\t\t\t\t'post_type'   => cur_get_cpt_slug(),\n\t\t\t\t\t\t'post_status' => 'publish',\n\t\t\t\t\t\t'nopaging'    => true\n\t\t\t\t\t) );\n\n\t\t\t\t\tforeach ( $stickies as $sticky_post ) {\n\t\t\t\t\t\tarray_splice( $posts, $sticky_offset, 0, array( $sticky_post ) );\n\t\t\t\t\t\t$sticky_offset ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $posts;\n\t}\n\n\t\/**\n\t * Makes the loop experience seamless by replacing all curator items with their original posts.\n\t *\n\t * Tada!\n\t *\n\t * @param $posts\n\t * @param $query\n\t *\n\t * @return mixed\n\t * @since 0.1.0\n\t *\/\n\tpublic function filter_the_posts( $posts, $query ) {\n\n\t\t\/\/ Ensure that we are only filtering for curator queries\n\t\tif ( ! is_admin()\n\t\t     && ! empty( $query->query['post_type'] )\n\t\t     && ! is_array( $query->query['post_type'] )\n\t\t     && cur_get_cpt_slug() === $query->query['post_type']\n\t\t) {\n\n\t\t\t\/\/ Replace the posts we found with their origins\n\t\t\tif ( ! empty( $posts ) ) {\n\n\t\t\t\t\/\/ Do for each post that was found\n\t\t\t\tforeach ( $posts as $key => $post ) {\n\t\t\t\t\t$posts[ $key ] = get_post( cur_get_related_id( $post->ID ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $posts;\n\t}\n\n\t\/**\n\t * Determine if a post is featured. Will get the current post in the loop unless a\n\t * specific post ID is passed.\n\t *\n\t * @param int $post\n\t * @return bool\n\t *\/\n\tpublic function is_featured( $post = 0 ) {\n\t\t$post = get_post( $post );\n\n\t\t\/\/ get the curated post if we don't already have it\n\t\t$curated_post = cur_get_curated_post( $post->ID );\n\n\t\t\/\/ If we can't find a curated post or if it's not an int returned, abort\n\t\tif ( false === $curated_post || ! is_int( $curated_post ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t\/\/ Get our module information\n\t\t$modules = cur_get_modules();\n\n\t\t\/\/ Ensure that our featurer module is enabled\n\t\tif ( empty( $modules['featurer'] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t\/\/ Writing out $modules['featurer'] gets a bit long, let's tidy it up\n\t\t$featurer = $modules['featurer'];\n\n\t\t\/\/ Ensure that our module information is correct and contains 'enabled' and 'slug' items\n\t\tif ( empty( $featurer['enabled'] ) || true !== $featurer['enabled'] || empty( $featurer['slug'] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t\/\/ Get our feature term information\n\t\t$featurer_term = get_term_by( 'slug', $featurer['slug'], cur_get_tax_slug() );\n\n\t\t\/\/ Get terms associated with curated post\n\t\t$associated_terms = wp_list_pluck( wp_get_object_terms( $curated_post, cur_get_tax_slug() ), 'slug', 'term_id' );\n\n\t\t\/\/ Check to see if the curated post has the feature term associated with it - if so, then this is featured!\n\t\tif ( ! empty( $associated_terms[ $featurer_term->term_id ] ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t\/**\n\t * Display the featurer radio buttons to choose how prominent an item should be\n\t *\n\t * @return void\n\t *\/\n\tpublic function featurer_size_display() {\n\n\t\t\/\/ If featurer isn't enabled, abort\n\t\tif ( true !== cur_is_module_enabled( 'featurer' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ If post isn't featured then we shouldn't show this yet\n\t\tif ( ! cur_is_featured() ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ If our size submodule isn't enabled, abort\n\t\tif ( true !== self::$modules['featurer']['sizes']['enabled'] ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Get our sizes\n\t\t$sizes = $this->get_featurer_sizes();\n\n\t\t\/\/ Ensure our sizes array matches expectations (not empty && an array)\n\t\tif ( empty( $sizes ) || ! is_array( $sizes ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t\/\/ Do we already have a selected size?\n\t\t$curated_post = cur_get_curated_post();\n\t\t$current_size = get_post_meta( $curated_post, 'cur_featured_size', true );\n\n\t\tif ( empty( $current_size ) ) {\n\t\t\t$current_size = '1x1';\n\t\t}\n\t\t?>\n\t\t<div class=\"featurer-sizes\">\n\t\t\t<?php\n\t\t\tforeach ( (array) $sizes as $size_key => $size_enabled ) :\n\t\t\t\tif ( true === $size_enabled ) : ?>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tprintf( '<input type=\"radio\" name=\"cur-featurer-size\" value=\"%s\" %s>',\n\t\t\t\t\t\t\tesc_attr( $size_key ),\n\t\t\t\t\t\t\tchecked( $size_key, $current_size, false ) );\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<img src=\"<?php esc_attr_e( CUR_URL . 'images\/featurer-grid-' . $size_key . '.png' ); ?>\">\n\t\t\t\t\t<\/label>\n\t\t\t\t<?php\n\t\t\t\tendif;\n\t\t\tendforeach; ?>\n\t\t<\/div>\n\t\t<?php\n\t}\n\n\t\/**\n\t * Get the featured size of the curated item\n\t *\n\t * @param int $post_id\n\t *\n\t * @return mixed\n\t *\/\n\tpublic function get_featured_size( $post_id = 0 ) {\n\t\t$post = get_post( $post_id );\n\n\t\t\/\/ get the curated post if we don't already have it\n\t\t$curated_post = cur_get_curated_post( $post->ID );\n\n\t\tif ( true !== cur_is_featured( $curated_post ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn get_post_meta( $curated_post, 'cur_featured_size', true );\n\t}\n}\n\nCUR_Curator::factory()->setup();\n\n\/**\n * Accessor functions\n *\/\n\nfunction cur_get_post_types() {\n\treturn CUR_Curator::factory()->get_post_types();\n}\n\nfunction cur_get_related_id( $post_id ) {\n\treturn CUR_Curator::factory()->get_related_id( $post_id );\n}\n\nfunction cur_get_modules() {\n\treturn CUR_Curator::factory()->get_modules();\n}\n\nfunction cur_is_module_enabled( $module ) {\n\treturn CUR_Curator::factory()->is_module_enabled( $module );\n}\n\nfunction cur_get_module_term( $module ) {\n\treturn CUR_Curator::factory()->get_module_term( $module );\n}\n\nfunction cur_set_item_modules( $set_modules, $curated_post ) {\n\treturn CUR_Curator::factory()->set_item_modules( $set_modules, $curated_post );\n}\n\nfunction cur_uncurate_item( $post_id ) {\n\treturn CUR_Curator::factory()->uncurate_item( $post_id );\n}\n\nfunction cur_curate_post( $post_id, $post ) {\n\treturn CUR_Curator::factory()->curate_post( $post_id, $post );\n}\n\nfunction cur_get_pinner_option_slug() {\n\treturn CUR_Curator::factory()->get_pinner_option_slug();\n}\n\nfunction cur_pin_item( $curated_id ) {\n\treturn CUR_Curator::factory()->pin_item( $curated_id );\n}\n\nfunction cur_unpin_item( $curated_id ) {\n\treturn CUR_Curator::factory()->unpin_item( $curated_id );\n}\n\nfunction cur_get_pinner_max_items() {\n\treturn CUR_Curator::factory()->get_pinner_max_items();\n}\n\nfunction cur_get_curated_post( $post_id = 0 ) {\n\treturn CUR_Curator::factory()->get_curated_post( $post_id );\n}\n\nfunction cur_get_original_post( $post_id ) {\n\treturn CUR_Curator::factory()->get_original_post( $post_id );\n}\n\nfunction cur_is_featured( $post_id = 0 ) {\n\treturn CUR_Curator::factory()->is_featured( $post_id );\n}\n\nfunction cur_get_featurer_sizes() {\n\treturn CUR_Curator::factory()->get_featurer_sizes();\n}\n\nfunction cur_get_featured_size( $post_id = 0 ) {\n\treturn CUR_Curator::factory()->get_featured_size( $post_id );\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,null,0,0,0,null,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,null,0,null,null,0,null,null,0,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,0,null,null,0,null,null,0,null,null,0,null,null,0,0,null,null,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,null,6,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,6,6,6,6,null,6,6,0,0,0,0,0,6,null,null,null,6,6,6,6,6,6,null,6,null,6,null,null,6,null,null,6,null,6,null,6,null,null,0,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,1,null,1,0,null,null,1,1,1,0,0,1,null,null,1,null,null,1,1,1,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,null,0,0,0,0,null,null,0,null,null,0,0,0,0,0,0,null,null,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,0,0,0,null,0,0,0,null,null,0,null,null,0,0,null,null,0,0,null,null,0,0,null,null,null,null,null,null,null,null,null,null,6,6,null,6,6,null,null,6,0,6,6,null,0,null,2,null,null,null,null,null,null,null,null,null,null,null,5,5,null,null,5,0,null,null,null,5,1,null,5,null,null,null,null,null,null,null,null,null,null,null,3,3,null,null,3,0,null,null,null,3,1,null,2,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,0,0,0,null,0,null,null,null,6,6,null,6,6,6,null,6,null,null,null,null,null,null,null,null,null,null,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,null,null,3,3,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,6,6,6,6,6,null,null,6,6,6,6,6,6,null,null,6,6,0,0,null,0,0,0,null,0,null,0,null,0,null,0,0,0,0,null,null,0,0,0,null,null,0,0,0,0,0,null,0,null,0,0,0,0,0,0,6,null,6,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,6,6,6,6,null,null,6,null,null,0,0,0,0,6,null,6,null,null,null,null,null,null,null,null,null,null,2,null,null,2,null,null,2,0,null,null,null,2,null,null,2,0,null,null,null,2,null,null,2,0,null,null,null,2,null,null,2,null,null,2,1,null,null,1,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,0,0,null,null,null,0,0,null,null,null,0,null,null,0,0,null,null,null,0,0,null,0,0,0,null,null,null,0,null,null,null,0,0,0,null,null,null,null,0,null,null,null,0,null,null,null,null,null,null,null,null,null,0,null,null,0,null,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,6,null,null,null,4,null,null,null,2,null,null,null,0,null,null,null,6,null,null,null,1,null,null,null,3,null,null,null,6,null,null,null,6,null,null,null,0,null,null,null,0,null,null,null,0,null,null,null,5,null,null,null,3,null,null,null,2,null,null,null,0,null,null,null,0,null]},{"name":"includes\/class-singleton.php","source":"<?php\n\n\/**\n * Reusable Singleton Class\n *\n * This class is meant to be extended\n * Example:\n *\n * class CUR_MyClass extends CUR_Singleton {\n * }\n *\/\nabstract class CUR_Singleton {\n\n\t\/**\n\t * Internally-stored instance of the class\n\t *\n\t * DO NOT CALL THIS PROPERTY DIRECTLY,\n\t * use the MyClass::factory() method below instead\n\t *\n\t * By using an array, we can store singltetons for many classes\n\t * This makes it possible to be a base class, meant to be extended\n\t * @var array\n\t *\/\n\tprotected static $_instance = array();\n\n\t\/**\n\t * All extended child classes\n\t *\/\n\tprotected function  __construct() { }\n\n\t\/**\n\t * Returns new or existing Singleton instance\n\t *\n\t * Call this method instead of using 'new MyClass ;'\n\t *\n\t * Example:\n\t *\n\t * class CUR_MyClass extends CUR_Singleton {\n\t * \t\tpublic function __construct {\n\t * \t\t\t$this->doMethod();\n\t * \t\t}\n\t * \t\tpublic function doMethod {\n\t * \t\t\t\/\/ this runs on instantiation\n\t * \t\t}\n\t * \t\tpublic function doAnotherMethod {\n\t * \t\t}\n\t * }\n\t *\n\t * $myClassInstance = CUR_MyClass::factory;\n\t * $myClassInstance->doAnotherMethod;\n\t *\n\t * @return Singleton\n\t *\/\n\tfinal static function factory() {\n\t\t\/\/ Reference the class being instantiated\n\t\t$class = get_called_class();\n\n\t\t\/\/ Is there already an instance of the class?\n\t\tif ( ! isset( static::$_instance[ $class ] ) ) {\n\n\t\t\t\/\/ If not, instantiate a new instance\n\t\t\tself::$_instance[$class] = new $class();\n\t\t}\n\n\t\t\/\/ Return the single instance of the class\n\t\treturn self::$_instance[$class];\n\t}\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,6,null,null,6,null,null,0,0,null,null,6,null,null]},{"name":"includes\/class-tax-curator.php","source":"<?php\n\n\/**\n * Class CUR_Tax_Curator\n *\n * All taxonomies must be registered somewhere.\n * Might as well be here\n *\/\nclass CUR_Tax_Curator extends CUR_Singleton {\n\n\t\/**\n\t * Slug of taxonomy\n\t *\n\t * @var string\n\t * @since 0.1.0\n\t *\/\n\tpublic $tax_slug = 'cur-tax-curator';\n\n\t\/**\n\t * Build it\n\t * @since 0.1.0\n\t *\/\n\tpublic function __construct() {\n\t\tadd_action( 'init', array( $this, 'register_post_taxonomies' ) );\n\t}\n\n\t\/**\n\t * Registers taxonomies for \"cur\" post_type\n\t * @since 0.1.0\n\t *\/\n\tpublic function register_post_taxonomies() {\n\t\t$labels = array(\n\t\t\t'name'                       => __( 'Curator Tax', 'fpb' ),\n\t\t\t'singular_name'              => __( 'Curator Tax', 'fpb' ),\n\t\t\t'search_items'               => __( 'Search Curator Tax', 'fpb' ),\n\t\t\t'popular_items'              => __( 'Popular Curator Tax', 'fpb' ),\n\t\t\t'all_items'                  => __( 'All Curator Tax', 'fpb' ),\n\t\t\t'parent_item'                => __( 'Parent Curator Tax', 'fpb' ),\n\t\t\t'parent_item_colon'          => __( 'Parent Curator Tax:', 'fpb' ),\n\t\t\t'edit_item'                  => __( 'Edit Curator Tax', 'fpb' ),\n\t\t\t'update_item'                => __( 'Update Curator Tax', 'fpb' ),\n\t\t\t'add_new_item'               => __( 'Add New Curator Tax', 'fpb' ),\n\t\t\t'new_item_name'              => __( 'New Curator Tax', 'fpb' ),\n\t\t\t'separate_items_with_commas' => __( 'Separate Curator Tax with commas', 'fpb' ),\n\t\t\t'add_or_remove_items'        => __( 'Add or remove Curator Tax', 'fpb' ),\n\t\t\t'choose_from_most_used'      => __( 'Choose from the most used Curator Tax', 'fpb' ),\n\t\t\t'menu_name'                  => __( 'Curator Tax', 'fpb' ),\n\t\t);\n\n\t\t$args = array(\n\t\t\t'labels'            => $labels,\n\t\t\t'public'            => false,\n\t\t\t'show_in_nav_menus' => false,\n\t\t\t'show_ui'           => false,\n\t\t\t'show_tagcloud'     => false,\n\t\t\t'show_admin_column' => false,\n\t\t\t'hierarchical'      => false,\n\t\t\t'rewrite'           => false,\n\t\t\t'query_var'         => false,\n\t\t);\n\n\t\tregister_taxonomy( $this->tax_slug, cur_get_cpt_slug(), $args );\n\t}\n\n\t\/**\n\t * Sets the default terms for us to use\n\t * Fires on plugin activation\n\t * @since 0.1.0\n\t *\/\n\tpublic function setup_default_terms() {\n\n\t\t$modules = cur_get_modules();\n\n\t\t\/\/ Check for all enabled modules, add or delete terms as necessary\n\t\t$terms = get_terms( $this->tax_slug, array( 'hide_empty' => false ) );\n\n\t\tforeach ( $modules as $module => $module_info ) {\n\n\t\t\t\/\/ For enabled modules check to see if the term exists, if it doesn't add it\n\t\t\tif ( ! empty( $module_info['enabled'] ) && true === $module_info['enabled'] ) {\n\n\t\t\t\t\/\/ Check to see if we have this term already\n\t\t\t\t$module_term = get_term_by( 'slug', $module_info['slug'], $this->tax_slug );\n\n\t\t\t\t\/\/ If we don't have it then let's add it\n\t\t\t\tif ( false === $module_term && ! is_wp_error( $module_term ) ) {\n\t\t\t\t\twp_insert_term( $module_info['slug'], $this->tax_slug );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nCUR_Tax_Curator::factory();\n\n\/**\n * Accessor Functions\n *\/\n\nfunction cur_get_tax_slug() {\n\treturn CUR_Tax_Curator::factory()->tax_slug;\n}\n\nfunction cur_setup_default_terms() {\n\treturn CUR_Tax_Curator::factory()->setup_default_terms();\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,null,null,0,null,0,null,null,0,null,null,0,null,null,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,6,null,null,null,0,null]},{"name":"tests\/bootstrap.php","source":"<?php\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '\/tmp\/wordpress-tests-lib';\n}\n\nrequire_once( $_tests_dir . '\/includes\/functions.php' );\n\n$_SERVER['REMOTE_ADDR'] = '127.0.0.1';\n\nfunction _manually_load_plugin() {\n\trequire( dirname( __FILE__ ) . '\/..\/curator.php' );\n\n\trequire_once( dirname( __FILE__ ) . '\/includes\/functions.php' );\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\nrequire( $_tests_dir . '\/includes\/bootstrap.php' );\nrequire_once( dirname( __FILE__ ) . '\/includes\/class-cur-test-base.php' );","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,null,null,null,null]},{"name":"tests\/includes\/functions.php","source":"<?php\n\n\/**\n * Add our post types to include for testing\n *\n * @param $post_types\n *\n * @return array\n *\/\nfunction cur_test_setup_post_types( $post_types ) {\n\t$curator_post_types = array(\n\t\t'cur_test',\n\t\t'post',\n\t);\n\n\treturn $curator_post_types;\n}\nadd_filter( 'cur_set_post_types', 'cur_test_setup_post_types' );\n\n\/**\n * Enable all modules for testing\n *\n * @param $modules\n *\n * @return mixed\n *\/\nfunction cur_test_setup_modules( $modules ) {\n\t\/\/ Enable curation, featuring, and pinning of items in the curation plugin\n\t$modules['curator']['enabled'] = true;\n\t$modules['featurer']['enabled'] = true;\n\t$modules['pinner']['enabled'] = true;\n\n\treturn $modules;\n}\nadd_filter( 'cur_modules', 'cur_test_setup_modules' );\n\n\/**\n * Create a WP post\n *\n * @param array $post_args\n * @param array $post_meta\n * @param int $site_id\n * @since 0.9\n * @return int|WP_Error\n *\/\nfunction cur_create_post( $post_args = array(), $post_meta = array(), $site_id = null ) {\n\tif ( $site_id != null ) {\n\t\tswitch_to_blog( $site_id );\n\t}\n\n\t$post_types = cur_get_post_types();\n\t$post_type_values = array_values( $post_types );\n\n\t$args = wp_parse_args( $post_args, array(\n\t\t'post_type' => $post_type_values[0],\n\t\t'post_status' => 'publish',\n\t\t'post_title' => 'Test Post ' . time(),\n\t) );\n\n\t$post_id = wp_insert_post( $args );\n\n\t\/\/ Quit if we have a WP_Error object\n\tif ( is_wp_error( $post_id ) ) {\n\t\treturn $post_id;\n\t}\n\n\tif ( ! empty( $post_meta ) ) {\n\t\tforeach ( $post_meta as $key => $value ) {\n\t\t\t\/\/ No need for sanitization here\n\t\t\tupdate_post_meta( $post_id, $key, $value );\n\t\t}\n\t}\n\n\tif ( $site_id != null ) {\n\t\trestore_current_blog();\n\t}\n\n\treturn $post_id;\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,null,null,null,null,null,null,6,0,0,null,6,6,null,6,6,6,6,6,null,6,null,null,6,0,null,null,6,0,null,0,0,0,null,6,0,0,null,6,null]}],"environment":{"packagist_version":"0.7.0-dev"}}